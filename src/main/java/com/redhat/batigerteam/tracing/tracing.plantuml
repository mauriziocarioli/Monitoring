@startuml

title __TRACING's Class Diagram__\n

  namespace com.redhat.batigerteam.tracing {
    abstract class com.redhat.batigerteam.tracing.CustomAgendaEventListener {
        + CustomAgendaEventListener()
        + afterMatchFired()
        + afterRuleFlowGroupActivated()
        + afterRuleFlowGroupDeactivated()
        + agendaGroupPopped()
        + agendaGroupPushed()
        + beforeMatchFired()
        + beforeRuleFlowGroupActivated()
        + beforeRuleFlowGroupDeactivated()
        + matchCancelled()
        + matchCreated()
    }
  }
  

  namespace com.redhat.batigerteam.tracing {
    abstract class com.redhat.batigerteam.tracing.CustomAsynchronousJobListener {
        + afterJobCanceled()
        + afterJobExecuted()
        + afterJobScheduled()
        + beforeJobCanceled()
        + beforeJobExecuted()
        + beforeJobScheduled()
    }
  }
  

  namespace com.redhat.batigerteam.tracing {
    abstract class com.redhat.batigerteam.tracing.CustomDMNRuntimeEventListener {
        + afterEvaluateBKM()
        + afterEvaluateContextEntry()
        + afterEvaluateDecision()
        + afterEvaluateDecisionService()
        + afterEvaluateDecisionTable()
        + beforeEvaluateBKM()
        + beforeEvaluateContextEntry()
        + beforeEvaluateDecision()
        + beforeEvaluateDecisionService()
        + beforeEvaluateDecisionTable()
    }
  }
  

  namespace com.redhat.batigerteam.tracing {
    abstract class com.redhat.batigerteam.tracing.CustomDeploymentEventListener {
        + onActivate()
        + onDeactivate()
        + onDeploy()
        + onUnDeploy()
    }
  }
  

  namespace com.redhat.batigerteam.tracing {
    abstract class com.redhat.batigerteam.tracing.CustomPhaseLifecycleListener {
        + phaseEnded()
        + phaseStarted()
        + solvingEnded()
        + solvingStarted()
        + stepEnded()
        + stepStarted()
    }
  }
  

  namespace com.redhat.batigerteam.tracing {
    abstract class com.redhat.batigerteam.tracing.CustomProcessEventListener {
        + CustomProcessEventListener()
        + afterNodeLeft()
        + afterNodeTriggered()
        + afterProcessCompleted()
        + afterProcessStarted()
        + afterSLAViolated()
        + afterVariableChanged()
        + beforeNodeLeft()
        + beforeNodeTriggered()
        + beforeProcessCompleted()
        + beforeProcessStarted()
        + beforeSLAViolated()
        + beforeVariableChanged()
    }
  }
  

  namespace com.redhat.batigerteam.tracing {
    abstract class com.redhat.batigerteam.tracing.CustomRuleRuntimeEventListener {
        + CustomRuleRuntimeEventListener()
        + objectDeleted()
        + objectInserted()
        + objectUpdated()
    }
  }
  

  namespace com.redhat.batigerteam.tracing {
    abstract class com.redhat.batigerteam.tracing.CustomTaskLifeCycleEventListener {
        + CustomTaskLifeCycleEventListener()
        + afterTaskActivatedEvent()
        + afterTaskAddedEvent()
        + afterTaskClaimedEvent()
        + afterTaskCompletedEvent()
        + afterTaskDelegatedEvent()
        + afterTaskExitedEvent()
        + afterTaskFailedEvent()
        + afterTaskForwardedEvent()
        + afterTaskNominatedEvent()
        + afterTaskNotificationEvent()
        + afterTaskReassignedEvent()
        + afterTaskReleasedEvent()
        + afterTaskResumedEvent()
        + afterTaskSkippedEvent()
        + afterTaskStartedEvent()
        + afterTaskStoppedEvent()
        + afterTaskSuspendedEvent()
        + afterTaskUpdatedEvent()
        + beforeTaskActivatedEvent()
        + beforeTaskAddedEvent()
        + beforeTaskClaimedEvent()
        + beforeTaskCompletedEvent()
        + beforeTaskDelegatedEvent()
        + beforeTaskExitedEvent()
        + beforeTaskFailedEvent()
        + beforeTaskForwardedEvent()
        + beforeTaskNominatedEvent()
        + beforeTaskNotificationEvent()
        + beforeTaskReassignedEvent()
        + beforeTaskReleasedEvent()
        + beforeTaskResumedEvent()
        + beforeTaskSkippedEvent()
        + beforeTaskStartedEvent()
        + beforeTaskStoppedEvent()
        + beforeTaskSuspendedEvent()
        + beforeTaskUpdatedEvent()
    }
  }
  

  com.redhat.batigerteam.tracing.CustomAgendaEventListener .up.|> org.kie.api.event.rule.AgendaEventListener
  com.redhat.batigerteam.tracing.CustomAsynchronousJobListener .up.|> org.jbpm.executor.AsynchronousJobListener
  com.redhat.batigerteam.tracing.CustomDMNRuntimeEventListener .up.|> org.kie.dmn.api.core.event.DMNRuntimeEventListener
  com.redhat.batigerteam.tracing.CustomDeploymentEventListener .up.|> org.jbpm.services.api.DeploymentEventListener
  com.redhat.batigerteam.tracing.CustomPhaseLifecycleListener .up.|> org.optaplanner.core.impl.phase.event.PhaseLifecycleListener
  com.redhat.batigerteam.tracing.CustomProcessEventListener .up.|> org.kie.api.event.process.ProcessEventListener
  com.redhat.batigerteam.tracing.CustomRuleRuntimeEventListener .up.|> org.kie.api.event.rule.RuleRuntimeEventListener
  com.redhat.batigerteam.tracing.CustomTaskLifeCycleEventListener .up.|> org.kie.api.task.TaskLifeCycleEventListener


right footer


PlantUML diagram generated by SketchIt! (https://bitbucket.org/pmesmeur/sketch.it)
For more information about this tool, please contact philippe.mesmeur@gmail.com
endfooter

@enduml
